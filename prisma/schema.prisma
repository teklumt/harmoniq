
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role          String?
  sessions      Session[]
  accounts      Account[]
  uploads       Music[]    @relation("UserUploads")
  favorites     Favorite[]
  playlists     Playlist[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}


model Music {
  id          String     @id @default(uuid())
  title       String
  author      String
  genre       String?
  url         String      // file storage URL
  uploadedBy  User        @relation("UserUploads", fields: [uploadedById], references: [id])
  uploadedById String
  createdAt   DateTime    @default(now())

  favorites   Favorite[]
  playlistMap PlaylistTrack[]
}

model Favorite {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  music    Music    @relation(fields: [musicId], references: [id])
  musicId  String
  createdAt DateTime @default(now())

  @@unique([userId, musicId])
}

model Playlist {
  id        String     @id @default(uuid())
  name      String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  tracks    PlaylistTrack[]
}

model PlaylistTrack {
  id         String   @id @default(uuid())
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  music      Music    @relation(fields: [musicId], references: [id])
  musicId    String
  order      Int      @default(0)

  @@unique([playlistId, musicId])
}


   
